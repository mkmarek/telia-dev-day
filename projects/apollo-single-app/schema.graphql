"""Exposes a URL that specifies the behaviour of this scalar."""
directive @specifiedBy(
  """The URL that specifies the behaviour of this scalar."""
  url: String!
) on SCALAR

type Basket implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!

  """Reads and enables pagination through a set of `BasketItem`."""
  basketItemsByBaskedId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BasketItem`."""
    orderBy: [BasketItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasketItemCondition
  ): BasketItemsConnection!
}

"""
A condition to be used against `Basket` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input BasketCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""An input for mutations affecting `Basket`"""
input BasketInput {
  id: UUID
}

type BasketItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  baskedId: UUID!
  productId: Int!

  """Reads a single `Basket` that is related to this `BasketItem`."""
  basketByBaskedId: Basket

  """Reads a single `Product` that is related to this `BasketItem`."""
  productByProductId: Product
}

"""
A condition to be used against `BasketItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input BasketItemCondition {
  """Checks for equality with the object’s `baskedId` field."""
  baskedId: UUID

  """Checks for equality with the object’s `productId` field."""
  productId: Int
}

"""An input for mutations affecting `BasketItem`"""
input BasketItemInput {
  baskedId: UUID!
  productId: Int!
}

"""
Represents an update to a `BasketItem`. Fields that are set will be updated.
"""
input BasketItemPatch {
  baskedId: UUID
  productId: Int
}

"""A connection to a list of `BasketItem` values."""
type BasketItemsConnection {
  """A list of `BasketItem` objects."""
  nodes: [BasketItem]!

  """
  A list of edges which contains the `BasketItem` and cursor to aid in pagination.
  """
  edges: [BasketItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BasketItem` you could get from the connection."""
  totalCount: Int!
}

"""A `BasketItem` edge in the connection."""
type BasketItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BasketItem` at the end of the edge."""
  node: BasketItem
}

"""Methods to use when ordering `BasketItem`."""
enum BasketItemsOrderBy {
  NATURAL
  BASKED_ID_ASC
  BASKED_ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Basket`. Fields that are set will be updated.
"""
input BasketPatch {
  id: UUID
}

"""A connection to a list of `Basket` values."""
type BasketsConnection {
  """A list of `Basket` objects."""
  nodes: [Basket]!

  """
  A list of edges which contains the `Basket` and cursor to aid in pagination.
  """
  edges: [BasketsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Basket` you could get from the connection."""
  totalCount: Int!
}

"""A `Basket` edge in the connection."""
type BasketsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Basket` at the end of the edge."""
  node: Basket
}

"""Methods to use when ordering `Basket`."""
enum BasketsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Category` values."""
type CategoriesConnection {
  """A list of `Category` objects."""
  nodes: [Category]!

  """
  A list of edges which contains the `Category` and cursor to aid in pagination.
  """
  edges: [CategoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Category` you could get from the connection."""
  totalCount: Int!
}

"""A `Category` edge in the connection."""
type CategoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Category` at the end of the edge."""
  node: Category
}

"""Methods to use when ordering `Category`."""
enum CategoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PARENT_ID_ASC
  PARENT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Category implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  description: String
  parentId: Int

  """Reads a single `Category` that is related to this `Category`."""
  categoryByParentId: Category

  """Reads and enables pagination through a set of `Category`."""
  categoriesByParentId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): CategoriesConnection!

  """Reads and enables pagination through a set of `Product`."""
  productsByCategoryId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection!
}

"""
A condition to be used against `Category` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CategoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `parentId` field."""
  parentId: Int
}

"""An input for mutations affecting `Category`"""
input CategoryInput {
  name: String!
  description: String
  parentId: Int
}

"""
Represents an update to a `Category`. Fields that are set will be updated.
"""
input CategoryPatch {
  name: String
  description: String
  parentId: Int
}

"""All input for the create `Basket` mutation."""
input CreateBasketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Basket` to be created by this mutation."""
  basket: BasketInput!
}

"""All input for the create `BasketItem` mutation."""
input CreateBasketItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BasketItem` to be created by this mutation."""
  basketItem: BasketItemInput!
}

"""The output of our create `BasketItem` mutation."""
type CreateBasketItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BasketItem` that was created by this mutation."""
  basketItem: BasketItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Basket` that is related to this `BasketItem`."""
  basketByBaskedId: Basket

  """Reads a single `Product` that is related to this `BasketItem`."""
  productByProductId: Product

  """An edge for our `BasketItem`. May be used by Relay 1."""
  basketItemEdge(
    """The method to use when ordering `BasketItem`."""
    orderBy: [BasketItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasketItemsEdge
}

"""The output of our create `Basket` mutation."""
type CreateBasketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Basket` that was created by this mutation."""
  basket: Basket

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Basket`. May be used by Relay 1."""
  basketEdge(
    """The method to use when ordering `Basket`."""
    orderBy: [BasketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasketsEdge
}

"""All input for the create `Category` mutation."""
input CreateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Category` to be created by this mutation."""
  category: CategoryInput!
}

"""The output of our create `Category` mutation."""
type CreateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was created by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Category`."""
  categoryByParentId: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the create `Manufacturer` mutation."""
input CreateManufacturerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Manufacturer` to be created by this mutation."""
  manufacturer: ManufacturerInput!
}

"""The output of our create `Manufacturer` mutation."""
type CreateManufacturerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Manufacturer` that was created by this mutation."""
  manufacturer: Manufacturer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Manufacturer`. May be used by Relay 1."""
  manufacturerEdge(
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ManufacturersEdge
}

"""All input for the create `OrderItem` mutation."""
input CreateOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OrderItem` to be created by this mutation."""
  orderItem: OrderItemInput!
}

"""The output of our create `OrderItem` mutation."""
type CreateOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was created by this mutation."""
  orderItem: OrderItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserOrder` that is related to this `OrderItem`."""
  userOrderByOrderId: UserOrder

  """Reads a single `Product` that is related to this `OrderItem`."""
  productByProductId: Product

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the create `ProductImage` mutation."""
input CreateProductImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProductImage` to be created by this mutation."""
  productImage: ProductImageInput!
}

"""The output of our create `ProductImage` mutation."""
type CreateProductImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductImage` that was created by this mutation."""
  productImage: ProductImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `ProductImage`."""
  productByProductId: Product

  """An edge for our `ProductImage`. May be used by Relay 1."""
  productImageEdge(
    """The method to use when ordering `ProductImage`."""
    orderBy: [ProductImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductImagesEdge
}

"""All input for the create `Product` mutation."""
input CreateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Product` to be created by this mutation."""
  product: ProductInput!
}

"""The output of our create `Product` mutation."""
type CreateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was created by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Product`."""
  categoryByCategoryId: Category

  """Reads a single `Manufacturer` that is related to this `Product`."""
  manufacturerByManufacturerId: Manufacturer

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the create `Review` mutation."""
input CreateReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Review` to be created by this mutation."""
  review: ReviewInput!
}

"""The output of our create `Review` mutation."""
type CreateReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was created by this mutation."""
  review: Review

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Review`."""
  productByProductId: Product

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""All input for the create `UserOrder` mutation."""
input CreateUserOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UserOrder` to be created by this mutation."""
  userOrder: UserOrderInput!
}

"""The output of our create `UserOrder` mutation."""
type CreateUserOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrder` that was created by this mutation."""
  userOrder: UserOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserOrder`. May be used by Relay 1."""
  userOrderEdge(
    """The method to use when ordering `UserOrder`."""
    orderBy: [UserOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrdersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteBasketById` mutation."""
input DeleteBasketByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteBasket` mutation."""
input DeleteBasketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Basket` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBasketItemByBaskedIdAndProductId` mutation."""
input DeleteBasketItemByBaskedIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  baskedId: UUID!
  productId: Int!
}

"""All input for the `deleteBasketItem` mutation."""
input DeleteBasketItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BasketItem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `BasketItem` mutation."""
type DeleteBasketItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BasketItem` that was deleted by this mutation."""
  basketItem: BasketItem
  deletedBasketItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Basket` that is related to this `BasketItem`."""
  basketByBaskedId: Basket

  """Reads a single `Product` that is related to this `BasketItem`."""
  productByProductId: Product

  """An edge for our `BasketItem`. May be used by Relay 1."""
  basketItemEdge(
    """The method to use when ordering `BasketItem`."""
    orderBy: [BasketItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasketItemsEdge
}

"""The output of our delete `Basket` mutation."""
type DeleteBasketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Basket` that was deleted by this mutation."""
  basket: Basket
  deletedBasketId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Basket`. May be used by Relay 1."""
  basketEdge(
    """The method to use when ordering `Basket`."""
    orderBy: [BasketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasketsEdge
}

"""All input for the `deleteCategoryById` mutation."""
input DeleteCategoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteCategory` mutation."""
input DeleteCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Category` mutation."""
type DeleteCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was deleted by this mutation."""
  category: Category
  deletedCategoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Category`."""
  categoryByParentId: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `deleteManufacturerById` mutation."""
input DeleteManufacturerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteManufacturer` mutation."""
input DeleteManufacturerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Manufacturer` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Manufacturer` mutation."""
type DeleteManufacturerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Manufacturer` that was deleted by this mutation."""
  manufacturer: Manufacturer
  deletedManufacturerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Manufacturer`. May be used by Relay 1."""
  manufacturerEdge(
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ManufacturersEdge
}

"""All input for the `deleteOrderItemByOrderIdAndProductId` mutation."""
input DeleteOrderItemByOrderIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  orderId: UUID!
  productId: Int!
}

"""All input for the `deleteOrderItem` mutation."""
input DeleteOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrderItem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `OrderItem` mutation."""
type DeleteOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was deleted by this mutation."""
  orderItem: OrderItem
  deletedOrderItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserOrder` that is related to this `OrderItem`."""
  userOrderByOrderId: UserOrder

  """Reads a single `Product` that is related to this `OrderItem`."""
  productByProductId: Product

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the `deleteProductById` mutation."""
input DeleteProductByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteProductImageById` mutation."""
input DeleteProductImageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteProductImage` mutation."""
input DeleteProductImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductImage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProductImage` mutation."""
type DeleteProductImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductImage` that was deleted by this mutation."""
  productImage: ProductImage
  deletedProductImageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `ProductImage`."""
  productByProductId: Product

  """An edge for our `ProductImage`. May be used by Relay 1."""
  productImageEdge(
    """The method to use when ordering `ProductImage`."""
    orderBy: [ProductImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductImagesEdge
}

"""All input for the `deleteProduct` mutation."""
input DeleteProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Product` mutation."""
type DeleteProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was deleted by this mutation."""
  product: Product
  deletedProductId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Product`."""
  categoryByCategoryId: Category

  """Reads a single `Manufacturer` that is related to this `Product`."""
  manufacturerByManufacturerId: Manufacturer

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `deleteReviewById` mutation."""
input DeleteReviewByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteReview` mutation."""
input DeleteReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Review` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Review` mutation."""
type DeleteReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was deleted by this mutation."""
  review: Review
  deletedReviewId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Review`."""
  productByProductId: Product

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""All input for the `deleteUserOrderById` mutation."""
input DeleteUserOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: UUID!
}

"""All input for the `deleteUserOrder` mutation."""
input DeleteUserOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserOrder` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UserOrder` mutation."""
type DeleteUserOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrder` that was deleted by this mutation."""
  userOrder: UserOrder
  deletedUserOrderId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserOrder`. May be used by Relay 1."""
  userOrderEdge(
    """The method to use when ordering `UserOrder`."""
    orderBy: [UserOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrdersEdge
}

type Manufacturer implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  description: String

  """Reads and enables pagination through a set of `Product`."""
  productsByManufacturerId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection!
}

"""
A condition to be used against `Manufacturer` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ManufacturerCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String
}

"""An input for mutations affecting `Manufacturer`"""
input ManufacturerInput {
  name: String!
  description: String
}

"""
Represents an update to a `Manufacturer`. Fields that are set will be updated.
"""
input ManufacturerPatch {
  name: String
  description: String
}

"""A connection to a list of `Manufacturer` values."""
type ManufacturersConnection {
  """A list of `Manufacturer` objects."""
  nodes: [Manufacturer]!

  """
  A list of edges which contains the `Manufacturer` and cursor to aid in pagination.
  """
  edges: [ManufacturersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Manufacturer` you could get from the connection."""
  totalCount: Int!
}

"""A `Manufacturer` edge in the connection."""
type ManufacturersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Manufacturer` at the end of the edge."""
  node: Manufacturer
}

"""Methods to use when ordering `Manufacturer`."""
enum ManufacturersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Basket`."""
  createBasket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBasketInput!
  ): CreateBasketPayload

  """Creates a single `BasketItem`."""
  createBasketItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBasketItemInput!
  ): CreateBasketItemPayload

  """Creates a single `Category`."""
  createCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCategoryInput!
  ): CreateCategoryPayload

  """Creates a single `Manufacturer`."""
  createManufacturer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateManufacturerInput!
  ): CreateManufacturerPayload

  """Creates a single `OrderItem`."""
  createOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOrderItemInput!
  ): CreateOrderItemPayload

  """Creates a single `Product`."""
  createProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductInput!
  ): CreateProductPayload

  """Creates a single `ProductImage`."""
  createProductImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProductImageInput!
  ): CreateProductImagePayload

  """Creates a single `Review`."""
  createReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateReviewInput!
  ): CreateReviewPayload

  """Creates a single `UserOrder`."""
  createUserOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserOrderInput!
  ): CreateUserOrderPayload

  """Updates a single `Basket` using its globally unique id and a patch."""
  updateBasket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasketInput!
  ): UpdateBasketPayload

  """Updates a single `Basket` using a unique key and a patch."""
  updateBasketById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasketByIdInput!
  ): UpdateBasketPayload

  """
  Updates a single `BasketItem` using its globally unique id and a patch.
  """
  updateBasketItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasketItemInput!
  ): UpdateBasketItemPayload

  """Updates a single `BasketItem` using a unique key and a patch."""
  updateBasketItemByBaskedIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBasketItemByBaskedIdAndProductIdInput!
  ): UpdateBasketItemPayload

  """Updates a single `Category` using its globally unique id and a patch."""
  updateCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryInput!
  ): UpdateCategoryPayload

  """Updates a single `Category` using a unique key and a patch."""
  updateCategoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCategoryByIdInput!
  ): UpdateCategoryPayload

  """
  Updates a single `Manufacturer` using its globally unique id and a patch.
  """
  updateManufacturer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateManufacturerInput!
  ): UpdateManufacturerPayload

  """Updates a single `Manufacturer` using a unique key and a patch."""
  updateManufacturerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateManufacturerByIdInput!
  ): UpdateManufacturerPayload

  """Updates a single `OrderItem` using its globally unique id and a patch."""
  updateOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderItemInput!
  ): UpdateOrderItemPayload

  """Updates a single `OrderItem` using a unique key and a patch."""
  updateOrderItemByOrderIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOrderItemByOrderIdAndProductIdInput!
  ): UpdateOrderItemPayload

  """Updates a single `Product` using its globally unique id and a patch."""
  updateProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductInput!
  ): UpdateProductPayload

  """Updates a single `Product` using a unique key and a patch."""
  updateProductById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductByIdInput!
  ): UpdateProductPayload

  """
  Updates a single `ProductImage` using its globally unique id and a patch.
  """
  updateProductImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductImageInput!
  ): UpdateProductImagePayload

  """Updates a single `ProductImage` using a unique key and a patch."""
  updateProductImageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProductImageByIdInput!
  ): UpdateProductImagePayload

  """Updates a single `Review` using its globally unique id and a patch."""
  updateReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewInput!
  ): UpdateReviewPayload

  """Updates a single `Review` using a unique key and a patch."""
  updateReviewById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateReviewByIdInput!
  ): UpdateReviewPayload

  """Updates a single `UserOrder` using its globally unique id and a patch."""
  updateUserOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserOrderInput!
  ): UpdateUserOrderPayload

  """Updates a single `UserOrder` using a unique key and a patch."""
  updateUserOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserOrderByIdInput!
  ): UpdateUserOrderPayload

  """Deletes a single `Basket` using its globally unique id."""
  deleteBasket(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasketInput!
  ): DeleteBasketPayload

  """Deletes a single `Basket` using a unique key."""
  deleteBasketById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasketByIdInput!
  ): DeleteBasketPayload

  """Deletes a single `BasketItem` using its globally unique id."""
  deleteBasketItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasketItemInput!
  ): DeleteBasketItemPayload

  """Deletes a single `BasketItem` using a unique key."""
  deleteBasketItemByBaskedIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBasketItemByBaskedIdAndProductIdInput!
  ): DeleteBasketItemPayload

  """Deletes a single `Category` using its globally unique id."""
  deleteCategory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryInput!
  ): DeleteCategoryPayload

  """Deletes a single `Category` using a unique key."""
  deleteCategoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCategoryByIdInput!
  ): DeleteCategoryPayload

  """Deletes a single `Manufacturer` using its globally unique id."""
  deleteManufacturer(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteManufacturerInput!
  ): DeleteManufacturerPayload

  """Deletes a single `Manufacturer` using a unique key."""
  deleteManufacturerById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteManufacturerByIdInput!
  ): DeleteManufacturerPayload

  """Deletes a single `OrderItem` using its globally unique id."""
  deleteOrderItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderItemInput!
  ): DeleteOrderItemPayload

  """Deletes a single `OrderItem` using a unique key."""
  deleteOrderItemByOrderIdAndProductId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOrderItemByOrderIdAndProductIdInput!
  ): DeleteOrderItemPayload

  """Deletes a single `Product` using its globally unique id."""
  deleteProduct(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductInput!
  ): DeleteProductPayload

  """Deletes a single `Product` using a unique key."""
  deleteProductById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductByIdInput!
  ): DeleteProductPayload

  """Deletes a single `ProductImage` using its globally unique id."""
  deleteProductImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductImageInput!
  ): DeleteProductImagePayload

  """Deletes a single `ProductImage` using a unique key."""
  deleteProductImageById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProductImageByIdInput!
  ): DeleteProductImagePayload

  """Deletes a single `Review` using its globally unique id."""
  deleteReview(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewInput!
  ): DeleteReviewPayload

  """Deletes a single `Review` using a unique key."""
  deleteReviewById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteReviewByIdInput!
  ): DeleteReviewPayload

  """Deletes a single `UserOrder` using its globally unique id."""
  deleteUserOrder(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserOrderInput!
  ): DeleteUserOrderPayload

  """Deletes a single `UserOrder` using a unique key."""
  deleteUserOrderById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserOrderByIdInput!
  ): DeleteUserOrderPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type OrderItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  orderId: UUID!
  productId: Int!

  """Reads a single `UserOrder` that is related to this `OrderItem`."""
  userOrderByOrderId: UserOrder

  """Reads a single `Product` that is related to this `OrderItem`."""
  productByProductId: Product
}

"""
A condition to be used against `OrderItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OrderItemCondition {
  """Checks for equality with the object’s `orderId` field."""
  orderId: UUID

  """Checks for equality with the object’s `productId` field."""
  productId: Int
}

"""An input for mutations affecting `OrderItem`"""
input OrderItemInput {
  orderId: UUID!
  productId: Int!
}

"""
Represents an update to a `OrderItem`. Fields that are set will be updated.
"""
input OrderItemPatch {
  orderId: UUID
  productId: Int
}

"""A connection to a list of `OrderItem` values."""
type OrderItemsConnection {
  """A list of `OrderItem` objects."""
  nodes: [OrderItem]!

  """
  A list of edges which contains the `OrderItem` and cursor to aid in pagination.
  """
  edges: [OrderItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OrderItem` you could get from the connection."""
  totalCount: Int!
}

"""A `OrderItem` edge in the connection."""
type OrderItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OrderItem` at the end of the edge."""
  node: OrderItem
}

"""Methods to use when ordering `OrderItem`."""
enum OrderItemsOrderBy {
  NATURAL
  ORDER_ID_ASC
  ORDER_ID_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Product implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  name: String!
  description: String
  categoryId: Int
  manufacturerId: Int

  """Reads a single `Category` that is related to this `Product`."""
  categoryByCategoryId: Category

  """Reads a single `Manufacturer` that is related to this `Product`."""
  manufacturerByManufacturerId: Manufacturer

  """Reads and enables pagination through a set of `ProductImage`."""
  productImagesByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProductImage`."""
    orderBy: [ProductImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductImageCondition
  ): ProductImagesConnection!

  """Reads and enables pagination through a set of `Review`."""
  reviewsByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCondition
  ): ReviewsConnection!

  """Reads and enables pagination through a set of `BasketItem`."""
  basketItemsByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BasketItem`."""
    orderBy: [BasketItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasketItemCondition
  ): BasketItemsConnection!

  """Reads and enables pagination through a set of `OrderItem`."""
  orderItemsByProductId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderItemCondition
  ): OrderItemsConnection!
}

"""
A condition to be used against `Product` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProductCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `categoryId` field."""
  categoryId: Int

  """Checks for equality with the object’s `manufacturerId` field."""
  manufacturerId: Int
}

type ProductImage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  url: String!
  description: String
  productId: Int

  """Reads a single `Product` that is related to this `ProductImage`."""
  productByProductId: Product
}

"""
A condition to be used against `ProductImage` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProductImageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `productId` field."""
  productId: Int
}

"""An input for mutations affecting `ProductImage`"""
input ProductImageInput {
  url: String!
  description: String
  productId: Int
}

"""
Represents an update to a `ProductImage`. Fields that are set will be updated.
"""
input ProductImagePatch {
  url: String
  description: String
  productId: Int
}

"""A connection to a list of `ProductImage` values."""
type ProductImagesConnection {
  """A list of `ProductImage` objects."""
  nodes: [ProductImage]!

  """
  A list of edges which contains the `ProductImage` and cursor to aid in pagination.
  """
  edges: [ProductImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProductImage` you could get from the connection."""
  totalCount: Int!
}

"""A `ProductImage` edge in the connection."""
type ProductImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProductImage` at the end of the edge."""
  node: ProductImage
}

"""Methods to use when ordering `ProductImage`."""
enum ProductImagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  URL_ASC
  URL_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Product`"""
input ProductInput {
  name: String!
  description: String
  categoryId: Int
  manufacturerId: Int
}

"""
Represents an update to a `Product`. Fields that are set will be updated.
"""
input ProductPatch {
  name: String
  description: String
  categoryId: Int
  manufacturerId: Int
}

"""A connection to a list of `Product` values."""
type ProductsConnection {
  """A list of `Product` objects."""
  nodes: [Product]!

  """
  A list of edges which contains the `Product` and cursor to aid in pagination.
  """
  edges: [ProductsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Product` you could get from the connection."""
  totalCount: Int!
}

"""A `Product` edge in the connection."""
type ProductsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Product` at the end of the edge."""
  node: Product
}

"""Methods to use when ordering `Product`."""
enum ProductsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CATEGORY_ID_ASC
  CATEGORY_ID_DESC
  MANUFACTURER_ID_ASC
  MANUFACTURER_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Basket`."""
  allBaskets(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Basket`."""
    orderBy: [BasketsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasketCondition
  ): BasketsConnection

  """Reads and enables pagination through a set of `BasketItem`."""
  allBasketItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BasketItem`."""
    orderBy: [BasketItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BasketItemCondition
  ): BasketItemsConnection

  """Reads and enables pagination through a set of `Category`."""
  allCategories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CategoryCondition
  ): CategoriesConnection

  """Reads and enables pagination through a set of `Manufacturer`."""
  allManufacturers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ManufacturerCondition
  ): ManufacturersConnection

  """Reads and enables pagination through a set of `OrderItem`."""
  allOrderItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderItemCondition
  ): OrderItemsConnection

  """Reads and enables pagination through a set of `Product`."""
  allProducts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductCondition
  ): ProductsConnection

  """Reads and enables pagination through a set of `ProductImage`."""
  allProductImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProductImage`."""
    orderBy: [ProductImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProductImageCondition
  ): ProductImagesConnection

  """Reads and enables pagination through a set of `Review`."""
  allReviews(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ReviewCondition
  ): ReviewsConnection

  """Reads and enables pagination through a set of `UserOrder`."""
  allUserOrders(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UserOrder`."""
    orderBy: [UserOrdersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserOrderCondition
  ): UserOrdersConnection
  basketById(id: UUID!): Basket
  basketItemByBaskedIdAndProductId(baskedId: UUID!, productId: Int!): BasketItem
  categoryById(id: Int!): Category
  manufacturerById(id: Int!): Manufacturer
  orderItemByOrderIdAndProductId(orderId: UUID!, productId: Int!): OrderItem
  productById(id: Int!): Product
  productImageById(id: Int!): ProductImage
  reviewById(id: Int!): Review
  userOrderById(id: UUID!): UserOrder

  """Reads a single `Basket` using its globally unique `ID`."""
  basket(
    """The globally unique `ID` to be used in selecting a single `Basket`."""
    nodeId: ID!
  ): Basket

  """Reads a single `BasketItem` using its globally unique `ID`."""
  basketItem(
    """
    The globally unique `ID` to be used in selecting a single `BasketItem`.
    """
    nodeId: ID!
  ): BasketItem

  """Reads a single `Category` using its globally unique `ID`."""
  category(
    """The globally unique `ID` to be used in selecting a single `Category`."""
    nodeId: ID!
  ): Category

  """Reads a single `Manufacturer` using its globally unique `ID`."""
  manufacturer(
    """
    The globally unique `ID` to be used in selecting a single `Manufacturer`.
    """
    nodeId: ID!
  ): Manufacturer

  """Reads a single `OrderItem` using its globally unique `ID`."""
  orderItem(
    """The globally unique `ID` to be used in selecting a single `OrderItem`."""
    nodeId: ID!
  ): OrderItem

  """Reads a single `Product` using its globally unique `ID`."""
  product(
    """The globally unique `ID` to be used in selecting a single `Product`."""
    nodeId: ID!
  ): Product

  """Reads a single `ProductImage` using its globally unique `ID`."""
  productImage(
    """
    The globally unique `ID` to be used in selecting a single `ProductImage`.
    """
    nodeId: ID!
  ): ProductImage

  """Reads a single `Review` using its globally unique `ID`."""
  review(
    """The globally unique `ID` to be used in selecting a single `Review`."""
    nodeId: ID!
  ): Review

  """Reads a single `UserOrder` using its globally unique `ID`."""
  userOrder(
    """The globally unique `ID` to be used in selecting a single `UserOrder`."""
    nodeId: ID!
  ): UserOrder
}

type Review implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  userName: String!
  rating: Int!
  content: String
  productId: Int!

  """Reads a single `Product` that is related to this `Review`."""
  productByProductId: Product
}

"""
A condition to be used against `Review` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ReviewCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `userName` field."""
  userName: String

  """Checks for equality with the object’s `rating` field."""
  rating: Int

  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `productId` field."""
  productId: Int
}

"""An input for mutations affecting `Review`"""
input ReviewInput {
  userName: String!
  rating: Int!
  content: String
  productId: Int!
}

"""
Represents an update to a `Review`. Fields that are set will be updated.
"""
input ReviewPatch {
  userName: String
  rating: Int
  content: String
  productId: Int
}

"""A connection to a list of `Review` values."""
type ReviewsConnection {
  """A list of `Review` objects."""
  nodes: [Review]!

  """
  A list of edges which contains the `Review` and cursor to aid in pagination.
  """
  edges: [ReviewsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Review` you could get from the connection."""
  totalCount: Int!
}

"""A `Review` edge in the connection."""
type ReviewsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Review` at the end of the edge."""
  node: Review
}

"""Methods to use when ordering `Review`."""
enum ReviewsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USER_NAME_ASC
  USER_NAME_DESC
  RATING_ASC
  RATING_DESC
  CONTENT_ASC
  CONTENT_DESC
  PRODUCT_ID_ASC
  PRODUCT_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateBasketById` mutation."""
input UpdateBasketByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Basket` being updated.
  """
  basketPatch: BasketPatch!
  id: UUID!
}

"""All input for the `updateBasket` mutation."""
input UpdateBasketInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Basket` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Basket` being updated.
  """
  basketPatch: BasketPatch!
}

"""All input for the `updateBasketItemByBaskedIdAndProductId` mutation."""
input UpdateBasketItemByBaskedIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BasketItem` being updated.
  """
  basketItemPatch: BasketItemPatch!
  baskedId: UUID!
  productId: Int!
}

"""All input for the `updateBasketItem` mutation."""
input UpdateBasketItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BasketItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BasketItem` being updated.
  """
  basketItemPatch: BasketItemPatch!
}

"""The output of our update `BasketItem` mutation."""
type UpdateBasketItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BasketItem` that was updated by this mutation."""
  basketItem: BasketItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Basket` that is related to this `BasketItem`."""
  basketByBaskedId: Basket

  """Reads a single `Product` that is related to this `BasketItem`."""
  productByProductId: Product

  """An edge for our `BasketItem`. May be used by Relay 1."""
  basketItemEdge(
    """The method to use when ordering `BasketItem`."""
    orderBy: [BasketItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasketItemsEdge
}

"""The output of our update `Basket` mutation."""
type UpdateBasketPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Basket` that was updated by this mutation."""
  basket: Basket

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Basket`. May be used by Relay 1."""
  basketEdge(
    """The method to use when ordering `Basket`."""
    orderBy: [BasketsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BasketsEdge
}

"""All input for the `updateCategoryById` mutation."""
input UpdateCategoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
  id: Int!
}

"""All input for the `updateCategory` mutation."""
input UpdateCategoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Category` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Category` being updated.
  """
  categoryPatch: CategoryPatch!
}

"""The output of our update `Category` mutation."""
type UpdateCategoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Category` that was updated by this mutation."""
  category: Category

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Category`."""
  categoryByParentId: Category

  """An edge for our `Category`. May be used by Relay 1."""
  categoryEdge(
    """The method to use when ordering `Category`."""
    orderBy: [CategoriesOrderBy!] = [PRIMARY_KEY_ASC]
  ): CategoriesEdge
}

"""All input for the `updateManufacturerById` mutation."""
input UpdateManufacturerByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Manufacturer` being updated.
  """
  manufacturerPatch: ManufacturerPatch!
  id: Int!
}

"""All input for the `updateManufacturer` mutation."""
input UpdateManufacturerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Manufacturer` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Manufacturer` being updated.
  """
  manufacturerPatch: ManufacturerPatch!
}

"""The output of our update `Manufacturer` mutation."""
type UpdateManufacturerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Manufacturer` that was updated by this mutation."""
  manufacturer: Manufacturer

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Manufacturer`. May be used by Relay 1."""
  manufacturerEdge(
    """The method to use when ordering `Manufacturer`."""
    orderBy: [ManufacturersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ManufacturersEdge
}

"""All input for the `updateOrderItemByOrderIdAndProductId` mutation."""
input UpdateOrderItemByOrderIdAndProductIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OrderItem` being updated.
  """
  orderItemPatch: OrderItemPatch!
  orderId: UUID!
  productId: Int!
}

"""All input for the `updateOrderItem` mutation."""
input UpdateOrderItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OrderItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OrderItem` being updated.
  """
  orderItemPatch: OrderItemPatch!
}

"""The output of our update `OrderItem` mutation."""
type UpdateOrderItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OrderItem` that was updated by this mutation."""
  orderItem: OrderItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `UserOrder` that is related to this `OrderItem`."""
  userOrderByOrderId: UserOrder

  """Reads a single `Product` that is related to this `OrderItem`."""
  productByProductId: Product

  """An edge for our `OrderItem`. May be used by Relay 1."""
  orderItemEdge(
    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): OrderItemsEdge
}

"""All input for the `updateProductById` mutation."""
input UpdateProductByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
  id: Int!
}

"""All input for the `updateProductImageById` mutation."""
input UpdateProductImageByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProductImage` being updated.
  """
  productImagePatch: ProductImagePatch!
  id: Int!
}

"""All input for the `updateProductImage` mutation."""
input UpdateProductImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProductImage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProductImage` being updated.
  """
  productImagePatch: ProductImagePatch!
}

"""The output of our update `ProductImage` mutation."""
type UpdateProductImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProductImage` that was updated by this mutation."""
  productImage: ProductImage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `ProductImage`."""
  productByProductId: Product

  """An edge for our `ProductImage`. May be used by Relay 1."""
  productImageEdge(
    """The method to use when ordering `ProductImage`."""
    orderBy: [ProductImagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductImagesEdge
}

"""All input for the `updateProduct` mutation."""
input UpdateProductInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Product` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Product` being updated.
  """
  productPatch: ProductPatch!
}

"""The output of our update `Product` mutation."""
type UpdateProductPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Product` that was updated by this mutation."""
  product: Product

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Category` that is related to this `Product`."""
  categoryByCategoryId: Category

  """Reads a single `Manufacturer` that is related to this `Product`."""
  manufacturerByManufacturerId: Manufacturer

  """An edge for our `Product`. May be used by Relay 1."""
  productEdge(
    """The method to use when ordering `Product`."""
    orderBy: [ProductsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ProductsEdge
}

"""All input for the `updateReviewById` mutation."""
input UpdateReviewByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Review` being updated.
  """
  reviewPatch: ReviewPatch!
  id: Int!
}

"""All input for the `updateReview` mutation."""
input UpdateReviewInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Review` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Review` being updated.
  """
  reviewPatch: ReviewPatch!
}

"""The output of our update `Review` mutation."""
type UpdateReviewPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Review` that was updated by this mutation."""
  review: Review

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Product` that is related to this `Review`."""
  productByProductId: Product

  """An edge for our `Review`. May be used by Relay 1."""
  reviewEdge(
    """The method to use when ordering `Review`."""
    orderBy: [ReviewsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ReviewsEdge
}

"""All input for the `updateUserOrderById` mutation."""
input UpdateUserOrderByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UserOrder` being updated.
  """
  userOrderPatch: UserOrderPatch!
  id: UUID!
}

"""All input for the `updateUserOrder` mutation."""
input UpdateUserOrderInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UserOrder` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UserOrder` being updated.
  """
  userOrderPatch: UserOrderPatch!
}

"""The output of our update `UserOrder` mutation."""
type UpdateUserOrderPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UserOrder` that was updated by this mutation."""
  userOrder: UserOrder

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `UserOrder`. May be used by Relay 1."""
  userOrderEdge(
    """The method to use when ordering `UserOrder`."""
    orderBy: [UserOrdersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UserOrdersEdge
}

type UserOrder implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: UUID!

  """Reads and enables pagination through a set of `OrderItem`."""
  orderItemsByOrderId(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OrderItem`."""
    orderBy: [OrderItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OrderItemCondition
  ): OrderItemsConnection!
}

"""
A condition to be used against `UserOrder` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UserOrderCondition {
  """Checks for equality with the object’s `id` field."""
  id: UUID
}

"""An input for mutations affecting `UserOrder`"""
input UserOrderInput {
  id: UUID
}

"""
Represents an update to a `UserOrder`. Fields that are set will be updated.
"""
input UserOrderPatch {
  id: UUID
}

"""A connection to a list of `UserOrder` values."""
type UserOrdersConnection {
  """A list of `UserOrder` objects."""
  nodes: [UserOrder]!

  """
  A list of edges which contains the `UserOrder` and cursor to aid in pagination.
  """
  edges: [UserOrdersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UserOrder` you could get from the connection."""
  totalCount: Int!
}

"""A `UserOrder` edge in the connection."""
type UserOrdersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UserOrder` at the end of the edge."""
  node: UserOrder
}

"""Methods to use when ordering `UserOrder`."""
enum UserOrdersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

